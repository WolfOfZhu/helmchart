## Redis镜像版本
## ref: https://hub.docker.com/r/bitnami/redis/tags/
##
image:
  registry: docker.io
  repository: gzocs/redis
  tag: 4.0.10
  ## 声明一个镜像拉取策略
  ## 如果镜像标签是'latest'默认是'Always',否则被设置为'IfNotPresent'
  ## 参考: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: Always
  ## 可选项，声明一个imagePullSecrets的数组
  ## secrets必须在命名空间里面人工创建
  ## 参考: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistrKeySecretName


## 集群设置
cluster:
  enabled: true
  slaveCount: 1

metrics:
  enabled: false
  # resources: {}
  # podAnnotations: {}
  service:
    type: ClusterIP
    annotations: {}
  #   prometheus.io/scrape: "true"
  #   prometheus.io/port: "9121"
    loadBalancerIP:
  image:
    registry: docker.io
    repository: oliver006/redis_exporter
    tag: v0.19.1
    pullPolicy: IfNotPresent
    ## 可选项，声明一个imagePullSecrets的数组
    ## secrets必须在命名空间里面人工创建
    ## 参考: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistrKeySecretName

  ## Pod声明相关的Metrics exporter的标签和默认
  # nodeSelector: {"beta.kubernetes.io/arch": "amd64"}
  # tolerations: []

  ## Metrics exporter的标签和默认
  # podLabels: {}

networkPolicy:
  ## 是否启用创建NetworkPolicy资源
  ##
  enabled: false

  ## 应用的策略模型。当设置为false只有带有正确客户端标签的pods才能够访问Redis正在监听的端口。
  ## 当设置为true时Redis将接受来自任何来源的连接（前提是端口号正确）。
  ##
  # allowExternal: true

serviceAccount:
  # 指定是否应该创建ServiceAccount
  create: false
  # ServiceAccount的名称
  # 如果未设置并create项为true，则使用fullname模板生成的名称
  name:

rbac:
  # 指定是否应该创建RBAC资源
  create: false

  role:
    ## 创建规则，请按照下面规则填写
    # rules:
    #  - apiGroups:
    #    - extensions
    #    resources:
    #      - podsecuritypolicies
    #    verbs:
    #      - use
    #    resourceNames:
    #      - gce.unprivileged
    rules: []

## Redis密码(master和slave均采用)
## 如果没有设置，则默认为随机的10字符字母数字字符串，usePassword为true
## 参考: https://github.com/bitnami/bitnami-docker-redis#setting-the-server-password-on-first-run
##
usePassword: true
password:
## 使用现有的secret(这将忽略上面的密码设置)
# existingSecret:

## Persist data to a persistent volume
persistence: 
  ## 需要一个手动管理的PVC
  ## 需要将enabled项设置为true
  enabled: false
  ## 如果定义为true则PVC必须人工创建
  # existingClaim:

##
## Redis Master参数
##
master:
  ## 使用密码身份验证
  port: 6379
  ## Redis命令行参数
  ##
  ## 可以用来指定命令行参数，例如:
  ##
  ## args:
  ##  - "redis-server"
  ##  - "--maxmemory-policy volatile-ttl"
  args: []
  ## Redis额外的命令行标志
  ##
  ## 可以用来指定命令行标志，例如:
  ##
  ## redisExtraFlags:
  ##  - "--maxmemory-policy volatile-ttl"
  ##  - "--repl-backlog-size 1024mb"
  extraFlags: []
  ## 要禁用的redis命令，用逗号隔开
  ##
  ## 出于安全考虑所以需要禁用redis命令
  ## 参考: https://github.com/bitnami/bitnami-docker-redis#disabling-redis-commands
  ##
  disableCommands: "FLUSHDB,FLUSHALL"
  ## 使用PVC启用持久化
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  ## Redis Master额外的pod标签
  ## 参考: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}
  ## Redis Master资源请求和极限
  ## 参考: http://kubernetes.io/docs/user-guide/compute-resources/
  # resources:
  #   requests:
  #     memory: 256Mi
  #     cpu: 100m
  ## 调度策略，非必填项，例如"stork"
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:


  ## Redis Master健康检查
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5

  ## Redis Master读写检查
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5
  ## Pod声明相关的Redis Master节点的标签和极限
  ## 参考: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  ## 参考: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
  # nodeSelector: {"beta.kubernetes.io/arch": "amd64"}
  # tolerations: []
  ## Redis Master pod/节点的affinity/anti-affinity
  affinity: {}
  ## Redis Master pod注释
  podAnnotations: {}
  ## Redis Master服务属性
  service:
    ##  Redis Master服务类型
    type: ClusterIP

    ## 为LoadBalancer和nodePort服务类型指定nodePort值
    ## 参考: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    # nodePort:

    ## 提供任何可能需要的附加注释，用于将LoadBalancer服务类型设置为内部
    ## 参考: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    annotations: {}
    loadBalancerIP:
  ## Redis Master Pod securityContext
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  persistence:
    enabled: true

    ## 卷挂载的路径，在使用不同的Redis映像时很有用。
    path: /bitnami/redis/data

    ## 该卷的子目录。在开发环境中很有用，一个持久卷用于多个服务
    subPath: ""

    ## redis数据持久卷存储类
    
    ## 如果定义了, storageClassName: <storageClass>
    ## 如果设置为"-", storageClassName: ""将禁用动态配置
    ## 如果未定义或者设置为空将不设置存储类名称，并且选择默认厂商。
    ## (gp2 on AWS, standard on GKE, AWS & OpenStack)
    # storageClass: "-"
    accessModes:
    - ReadWriteOnce
    size: 8Gi

  ## 更新策略。可以设置为RollingUpdate或者使用默认的onDelete
  ## https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#updating-statefulsets
  statefulset:
    updateStrategy: OnDelete
    ## 分区更新策略
    ## https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#partitions
    # rollingUpdatePartition:


##
## Redis Slave属性
## 注意: serviceType和ervice是必填项
## 至于其他的参数，如果未定义将使用默认值
##
slave:
  ## Slave服务属性
  service:
    ##  Redis Slave服务类型
    type: ClusterIP
    ## 为LoadBalancer和nodePort服务类型指定nodePort值
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    # nodePort:

    ## 提供任何可能需要的附加注释，用于将LoadBalancer服务类型设置为内部
    ## 参考: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    annotations: {}
    loadBalancerIP:

  ## Redis端口号
  # port: 6379
  ## Redis命令参数
  # args: []
  ## Redis 额外标志
  # extraFlags: []
  ## 要禁用的redis命令，用逗号隔开
  # disableCommands: ""

  affinity: {}

  ## Redis slave健康检查
  # livenessProbe:
  #   enabled: true
  #   initialDelaySeconds: 30
  #   periodSeconds: 10
  #   timeoutSeconds: 5
  #   successThreshold: 1
  #   failureThreshold: 5

  ## Redis slave读写检查
  # readinessProbe:
  #   enabled: true
  #   initialDelaySeconds: 5
  #   periodSeconds: 10
  #   timeoutSeconds: 10
  #   successThreshold: 1
  #   failureThreshold: 5

  ## Redis slave请求资源
  # resources:
  #   requests:
  #     memory: 256Mi
  #     cpu: 100m

  ## Pod声明关联的Redis slave标签和默认
  # nodeSelector: {"beta.kubernetes.io/arch": "amd64"}
  # tolerations: []

  ## 调度策略，非必填项，例如"stork"
  ## 参考: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:

  ## Redis slave pod注释和标签
  # podLabels: {}
  ## annotations for redis pods
  # podAnnotations: {}

  ## Redis slave pod Security Context
  # securityContext:
  #   enabled: true
  #   fsGroup: 1001
  #   runAsUser: 1001
