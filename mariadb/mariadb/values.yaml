## MariaDB镜像
## 参考: https://hub.docker.com/r/bitnami/mariadb/tags/
##
image:
  registry: docker.io
  repository: bitnami/mariadb
  tag: 10.1.34-debian-9
  ## 指定镜像拉取策略
  ## 默认为'Always'如果镜像标签是'latest'，否则将设置为'IfNotPresent'
  ## 参考: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## 可选项，指定一个imagePullSecrets的数组。
  ## Secrets必须在命名空间里面人工创建。
  ## 参考: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistrKeySecretName

service:
  ## Kubernetes服务类型
  type: ClusterIP
  port: 3306

rootUser:
  ## MariaDB admin密码
  ## 参考: https://github.com/bitnami/bitnami-docker-mariadb#setting-the-root-password-on-first-run
  ##
  password:
  ## 使用一个已有的secret(这将忽略root用户，普通用户和主从复制用户的密码)
  # existingSecret:
  ##
  ## 可选项，强制用户声明密码，前提是'helm upgrade'能够正常运作。
  ## 如果不是强制声明，密码将随机生成。
  forcePassword: false

db:
  ## MariaDB用户名和密码
  ## 参考: https://github.com/bitnami/bitnami-docker-mariadb#creating-a-database-user-on-first-run
  ##
  user:
  password:
  ## 如果已经使用已有的secret那么密码将被忽略。
  ## 要创建的数据库的名称
  ## 参考: https://github.com/bitnami/bitnami-docker-mariadb#creating-a-database-on-first-run
  ##
  name: my_database
  ## 可选项，强制用户声明密码，前提是'helm upgrade'能够正常运作。
  ## 如果不是强制声明，密码将随机生成。
  forcePassword: false

replication:
  ## 是否启用主从复制，这将创建带有slave副本的MariaDB。如果设置为false，将只创建一个master的部署
  enabled: true
  ##
  ## MariaDB主从复制用户名称
  ## 参考: https://github.com/bitnami/bitnami-docker-mariadb#setting-up-a-replication-cluster
  ##
  user: replicator
  ## MariaDB主从复制用户米娜
  ## 参考: https://github.com/bitnami/bitnami-docker-mariadb#setting-up-a-replication-cluster
  ##
  password:
  ## 如果已经指定已有的secret设置的密码将被忽略。
  ## 可选项，强制用户声明密码，前提是'helm upgrade'能够正常运作。
  ## 如果不是强制声明，密码将随机生成。
  forcePassword: false

master:
  antiAffinity: soft
  ## 使用PVC启用持久化
  ## 参考: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    ## 如果设置为true将使用PVC，否则直接使用emptyDir
    ##
    enabled: true
    ## 持久卷存储类
    ## 如果定义了存储类名称
    ## 如果设置为"-"或者""将禁用动态配置
    ## 如果未定义或者设置为空将使用默认配置(gp2 on AWS, azure-disk on
    ## Azure, standard on GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    ## PVC注解
    existingClaim: "-"
    ##
    # annotations:
    ## 持久卷访问模式
    ##
    # accessModes:
    # - ReadWriteOnce
    ## 持久卷大小
    ##
    # size: 8Gi
    ##

  ## 使用自定义的my.cnf文件配置MySQL
  ## 参考: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
  ##
  config: |-
    [mysqld]
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mariadb
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    tmpdir=/opt/bitnami/mariadb/tmp
    max_allowed_packet=16M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    log-error=/opt/bitnami/mariadb/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci

    [client]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    default-character-set=UTF8

    [manager]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid

  ## 配置master的资源请求值和极限值
  ## 参考: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
  livenessProbe:
    enabled: true
    ##
    ## 考虑到初始化数据库需要一定的时间
    initialDelaySeconds: 120
    ##
    ## Kubernetes的默认值
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    enabled: true
    initialDelaySeconds: 15
    ##
    ## Kubernetes的默认值
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

slave:
  replicas: 1
  antiAffinity: soft
  persistence:
    ## 如果设置为true将使用PVC，否则使用emptyDir
    ##
    enabled: true
    # storageClass: "-"
    annotations:
    accessModes:
    - ReadWriteOnce
    ## 持久卷大小
    ##
    size: 8Gi
    ##

  ## 使用自定义的my.cnf文件配置MySQL
  ## 参考: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
  ##
  config: |-
    [mysqld]
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mariadb
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    tmpdir=/opt/bitnami/mariadb/tmp
    max_allowed_packet=16M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    log-error=/opt/bitnami/mariadb/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci

    [client]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    default-character-set=UTF8

    [manager]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid

  ##
  ## 配置slave的资源请求值和极限值
  ## 参考: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
  livenessProbe:
    enabled: true
    ##
    ## 考虑到初始化数据库需要一定的时间
    initialDelaySeconds: 120
    ##
    ## Kubernetes的默认值
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    enabled: true
    initialDelaySeconds: 15
    ##
    ## Kubernetes的默认值
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

metrics:
  enabled: false
  image:
    registry: docker.io
    repository: prom/mysqld-exporter
    tag: v0.10.0
    pullPolicy: IfNotPresent
  resources: {}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9104"
